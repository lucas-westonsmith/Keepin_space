<div class="event-show-container">
  <div class="event-header">
    <h1><%= @event.title %></h1>
    <p class="event-organizer"><strong>Organized by:</strong> <%= @event.user.first_name %> <%= @event.user.last_name %></p>

    <p class="event-date">
      <strong>üìÖ Date:</strong>
      <% if @event.date.present? %>
        <%= @event.date.strftime("%B %d, %Y at %I:%M %p") %>
      <% else %>
        <em>Date not set</em>
      <% end %>

      <% if @event.end_date.present? %>
        <% if @event.date.to_date == @event.end_date.to_date %>
          - <%= @event.end_date.strftime("%I:%M %p") %>
        <% else %>
          <br><strong>üïõ Ends on:</strong> <%= @event.end_date.strftime("%B %d, %Y at %I:%M %p") %>
        <% end %>
      <% end %>
    </p>

    <p class="event-location"><strong>üìç Location:</strong> <%= @event.location %></p>

    <% if @event.sub_location.present? %>
      <p class="event-sub-location"><strong>üè¢ Sub-location:</strong> <%= @event.sub_location %></p>
    <% end %>

    <p class="event-description"><%= @event.description %></p>
  </div>

  <!-- ‚úÖ Boutons d'action -->
  <div class="event-actions">
    <% if user_signed_in? %>
      <% if current_user == @event.user %>
        <%= link_to "Edit Event", edit_event_path(@event), class: "btn btn-primary font-bold" %>
      <% else %>
        <% if @event.invitations.exists?(user_id: current_user.id, status: "accepted") %>
          <div class="dropdown">
            <%= link_to "Decline Event", decline_event_path(@event), method: :post, data: { turbo_method: :post }, class: "btn btn-danger" %>
            <ul class="dropdown-menu">
              <li><%= link_to "Accept", join_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Maybe", maybe_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Remain Pending", pending_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Decline", decline_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Remove Event", remove_event_path(@event), method: :delete, data: { turbo_method: :delete }, class: "dropdown-item" %></li>
            </ul>
          </div>
        <% else %>
          <div class="dropdown">
            <%= link_to "Join Event", join_event_path(@event), method: :post, data: { turbo_method: :post }, class: "btn btn-primary font-bold" %>
            <ul class="dropdown-menu">
              <li><%= link_to "Accept", join_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Maybe", maybe_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Remain Pending", pending_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Decline", decline_event_path(@event), method: :post, data: { turbo_method: :post }, class: "dropdown-item" %></li>
              <li><%= link_to "Remove Event", remove_event_path(@event), method: :delete, data: { turbo_method: :delete }, class: "dropdown-item" %></li>
            </ul>
          </div>
        <% end %>
      <% end %>
    <% end %>

    <!-- Ajouter l'√©v√©nement aux agendas -->
    <div class="event-calendar-actions">
      <!-- Google Calendar -->
      <% if @event.date.present? && @event.end_date.present? %>
        <%= link_to "Add to Google Calendar", "https://www.google.com/calendar/render?action=TEMPLATE&text=#{CGI.escape(@event.title + ' by ' + @event.user.first_name + ' ' + @event.user.last_name)}&dates=#{@event.date.strftime("%Y%m%dT%H%M%S")}/#{@event.end_date.strftime("%Y%m%dT%H%M%S")}&details=#{CGI.escape(@event.description + ' Event URL: ' + event_invitation_url(@event))}&location=#{CGI.escape(@event.location)}&sf=true&output=xml", target: "_blank", class: "btn btn-success" %>
      <% else %>
        <span class="text-muted">Event date or end date is missing</span>
      <% end %>

      <!-- iCalendar / Apple Calendar / Outlook -->
      <%= link_to "Add to Calendar (iCal) - Apple, Outlook, Android", download_ics_event_path(@event), class: "btn btn-warning" %>
    </div>
  </div>

  <!-- ‚úÖ Invitation des invit√©s -->
  <% if user_signed_in? && current_user == @event.user %>
    <div class="event-invite">
      <h2>Invite Guests</h2>
      <%= form_with model: [@event, Invitation.new], local: true, html: { class: "invite-form", id: "invitation-form" } do |form| %>
        <div class="form-row">
          <div class="form-group col">
            <%= form.label :contacts, "Invite Contacts" %>
            <div id="contacts-container">
              <% if @contacts.present? %>
                <input type="text" id="contact-search" class="form-control" placeholder="Start typing to find contacts">
                <div id="contacts-results" class="dropdown-menu"></div>
              <% else %>
                <p>No contacts available.</p>
              <% end %>
            </div>
            <%= form.hidden_field :contact_id, id: "selected-contact-id" %>
            <button type="button" class="btn btn-secondary btn-sm" id="add-contact-btn">Add Contact (or press Tab)</button>
          </div>

          <div class="form-group col">
            <%= form.label :email, "Guest Email (optional)" %>
            <div id="email-fields-container">
              <%= form.email_field :email, class: "form-control email-field", name: "invitation[email][]", placeholder: "Enter email" %>
            </div>
            <button type="button" class="btn btn-secondary btn-sm" id="add-email-btn">Add another email (or press Tab)</button>
          </div>

          <div class="form-group col">
            <%= form.label :phone, "Guest Phone (optional)" %>
            <div id="phone-fields-container">
              <%= form.text_field :phone, class: "form-control phone-field", name: "invitation[phone][]", placeholder: "Enter phone" %>
            </div>
            <button type="button" class="btn btn-secondary btn-sm" id="add-phone-btn">Add another phone (or press Tab)</button>
          </div>
        </div>
        <div class="form-group invite-btn-container">
          <%= form.submit "Send Invitation", class: "btn btn-primary btn-sm" %>
        </div>
      <% end %>

      <h3>Share Invitation Link</h3>
      <p>Send this link to invite guests:</p>
      <input type="text" value="<%= event_invitation_url(@event) %>" readonly class="form-control">
      <button onclick="copyToClipboard()" class="btn btn-secondary btn-sm">Copy</button>
    </div>
  <% end %>

<!-- Section pour le mur -->
<div class="event-wall">
  <h2>Event Wall</h2>
  <% if @event.can_post_on_wall || current_user == @event.user %>
    <%= form_with model: @new_post, url: create_post_event_path(@event), local: true do |form| %>
      <div class="form-group">
        <%= form.text_area :content, class: "form-control", placeholder: "Write something..." %>
      </div>
      <div class="form-group">
        <%= form.file_field :image, class: "form-control" %>
      </div>
      <div class="form-actions">
        <%= form.submit "Post", class: "btn btn-primary" %>
      </div>
    <% end %>
  <% end %>

  <div class="posts">
    <% @posts.each do |post| %>
      <div class="post">
        <p>
          <strong><%= post.user.first_name %> <%= post.user.last_name %></strong>
          <span class="post-timestamp">
            - <%= post.created_at.strftime("%d %b %H:%M") %>
          </span>
        </p>
        <p><%= post.content %></p>
        <% if post.image && post.image.attached? %>
          <%= image_tag post.image, class: "img-fluid" %>
        <% end %>
      </div>
    <% end %>
  </div>
</div>

<div class="event-polls">
  <h2>Polls</h2>
  <% if current_user == @event.user %>
    <%= form_with model: @new_poll, url: create_poll_event_path(@event), local: true do |form| %>
      <div class="form-group">
        <%= form.text_field :question, class: "form-control", placeholder: "Poll question" %>
      </div>

      <!-- Section pour les options de sondage -->
      <div id="poll-options">
        <!-- Afficher une option si elle existe d√©j√† -->
        <% @new_poll.poll_options.each_with_index do |option, index| %>
          <div class="form-group">
            <%= form.text_field "poll_options[#{index}][content]", value: option.content, class: "form-control", placeholder: "Option content" %>
          </div>
        <% end %>

        <!-- Si aucune option n'existe, afficher un champ vide -->
        <% if @new_poll.poll_options.empty? %>
          <div class="form-group">
            <%= form.text_field "poll_options[0][content]", class: "form-control", placeholder: "Option content" %>
          </div>
        <% end %>
      </div>

      <!-- Ajouter un autre champ d'option -->
      <div class="form-group">
        <%= form.text_field "poll_options[#{@new_poll.poll_options.size}][content]", class: "form-control", placeholder: "Another Option content" %>
      </div>

      <div class="form-actions">
        <%= form.submit "Create Poll", class: "btn btn-primary" %>
      </div>
    <% end %>
  <% end %>

  <!-- Liste des sondages d√©j√† existants -->
  <div class="polls">
    <% @polls.each do |poll| %>
      <div class="poll">
        <h3><%= poll.question %></h3>
        <% poll.poll_options.each do |option| %>
          <p><%= option.content %>: <%= option.votes_count %> votes</p>
        <% end %>
      </div>
    <% end %>
  </div>
</div>

  <!-- ‚úÖ Private Notes -->
  <div class="event-notes">
    <h2>Your Private Notes</h2>
    <%= form_with model: @note, url: event_notes_path(@event), method: :post, local: true do |form| %>
      <div class="form-group">
        <%= form.text_area :content, placeholder: "Write a private note about this event...", class: "form-control" %>
      </div>
      <div class="form-actions">
        <%= form.submit "Save Note", class: "btn btn-secondary" %>
      </div>
    <% end %>
  </div>

  <div class="event-guests">
  <h3>List of Guests</h3>

  <!-- Statistiques avec liens de filtre -->
  <p class="event-stats">
    üìã
    <%= link_to "#{@event.invitations.count} Total Invited", event_path(@event, filter: "all"), class: ("active-filter" if params[:filter].nil? || params[:filter] == "all") %>
    &nbsp;|&nbsp; üë•
    <%= link_to "#{@event.attendees_count} Attending", event_path(@event, filter: "attending"), class: ("active-filter" if params[:filter] == "attending") %>
  </p>
  <p class="event-stats">
    ü§ù
    <%= link_to "#{@event.contacts_attending_count(current_user)} Your contacts attending", event_path(@event, filter: "contacts_attending"), class: ("active-filter" if params[:filter] == "contacts_attending") %>
    &nbsp;|&nbsp; üîÑ
    <%= link_to "#{@event.people_you_ever_met_count(current_user)} People you ever met", event_path(@event, filter: "people_you_ever_met"), class: ("active-filter" if params[:filter] == "people_you_ever_met") %>
  </p>

  <ul>
    <!-- Afficher l'organisateur uniquement si le filtre ne l'exclut pas -->
    <% unless params[:filter] == "contacts_attending" || params[:filter] == "not_attending" || params[:filter] == "people_you_ever_met" %>
      <li class="guest-item">
        <%= link_to profile_path(@event.user), class: "guest-link" do %>
          <div class="guest-info">
            <span class="guest-name">‚≠ê <%= @event.user.first_name %> <%= @event.user.last_name %> (Organizer)</span>
          </div>
        <% end %>
      </li>
    <% end %>

    <% @sorted_invitations.each do |invitation| %>
      <% unless invitation.user == @event.user %> <!-- Exclure l'organisateur ici aussi dans l'affichage -->
        <% if params[:filter] == "people_you_ever_met" %>
          <% past_event_ids = current_user.invitations.joins(:event)
                                                 .where(status: "accepted")
                                                 .where("events.date < ?", DateTime.now)
                                                 .pluck(:event_id)

             already_met_ids = Invitation.where(event_id: past_event_ids, status: "accepted")
                                         .where.not(user_id: current_user.id)
                                         .pluck(:user_id)
                                         .uniq

             if already_met_ids.include?(invitation.user_id) %> <!-- Seulement les invit√©s d√©j√† rencontr√©s -->
          %>
            <li class="guest-item">
              <%= link_to (invitation.user.present? ? profile_path(invitation.user) : "#"), class: "guest-link" do %>
                <div class="guest-info">
                  <span class="guest-name"><%= invitation.user.present? ? "üü¢ #{invitation.user.first_name} #{invitation.user.last_name}" : "üîµ #{invitation.email || invitation.phone_number}" %></span>
                </div>
                <div class="guest-actions">
                  <span class="guest-status"><%= invitation.status&.humanize || "Pending" %></span>
                  <% if current_user == @event.user %>
                    <%= link_to "Remove", event_invitation_path(@event, invitation), method: :delete, data: { turbo_method: :delete, confirm: "Are you sure?" }, class: "btn btn-danger btn-sm" %>
                  <% end %>
                </div>
              <% end %>
            </li>
          <% end %>
        <% else %>
          <!-- Affichage des invit√©s pour les autres filtres -->
          <li class="guest-item">
            <%= link_to (invitation.user.present? ? profile_path(invitation.user) : "#"), class: "guest-link" do %>
              <div class="guest-info">
                <span class="guest-name"><%= invitation.user.present? ? "üü¢ #{invitation.user.first_name} #{invitation.user.last_name}" : "üîµ #{invitation.email || invitation.phone_number}" %></span>
              </div>
              <div class="guest-actions">
                <span class="guest-status"><%= invitation.status&.humanize || "Pending" %></span>
                <% if current_user == @event.user %>
                  <%= link_to "Remove", event_invitation_path(@event, invitation), method: :delete, data: { turbo_method: :delete, confirm: "Are you sure?" }, class: "btn btn-danger btn-sm" %>
                <% end %>
              </div>
            <% end %>
          </li>
        <% end %>
      <% end %>
    <% end %>
  </ul>
</div>

  <!-- ‚úÖ Retour √† la liste des √©v√©nements (centr√©) -->
  <div class="event-footer">
    <%= link_to "Back to Events", events_path, class: "btn btn-secondary center-btn font-bold" %>
  </div>
</div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Gestion des emails
      const addEmailButton = document.getElementById('add-email-btn');
      const emailFieldsContainer = document.getElementById('email-fields-container');
      const emailField = document.querySelector(".email-field");

      // Liste des emails ajout√©s
      let addedEmails = [];

      // Ajouter un email au clic
      addEmailButton.addEventListener('click', function() {
        let email = emailField.value.trim();

        if (email && !addedEmails.includes(email)) {
          addedEmails.push(email);

          // Cr√©er un conteneur pour l'email
          const emailItem = document.createElement('div');
          emailItem.classList.add('email-item');

          // Afficher l'email et la croix
          const emailText = document.createElement('span');
          emailText.textContent = email;
          emailItem.appendChild(emailText);

          const removeButton = document.createElement('span');
          removeButton.textContent = '‚úñ';
          removeButton.classList.add('remove-email');
          emailItem.appendChild(removeButton);

          emailFieldsContainer.appendChild(emailItem);

          // R√©initialiser le champ email
          emailField.value = '';

          // Event pour supprimer un email
          removeButton.addEventListener('click', function() {
            emailItem.remove();
            addedEmails = addedEmails.filter(e => e !== email);
          });
        } else {
          alert("Please enter a valid email address.");
        }
      });

      // Ajouter email avec la touche TAB
      emailField.addEventListener('keydown', function(event) {
        if (event.key === 'Tab') {
          event.preventDefault(); // emp√™cher le changement de focus

          let email = emailField.value.trim();

          if (email && !addedEmails.includes(email)) {
            addedEmails.push(email);

            // Cr√©er un conteneur pour l'email
            const emailItem = document.createElement('div');
            emailItem.classList.add('email-item');

            // Afficher l'email et la croix
            const emailText = document.createElement('span');
            emailText.textContent = email;
            emailItem.appendChild(emailText);

            const removeButton = document.createElement('span');
            removeButton.textContent = '‚úñ';
            removeButton.classList.add('remove-email');
            emailItem.appendChild(removeButton);

            emailFieldsContainer.appendChild(emailItem);

            // R√©initialiser le champ d'email
            emailField.value = '';

            // Event pour supprimer un email
            removeButton.addEventListener('click', function() {
              emailItem.remove();
              addedEmails = addedEmails.filter(e => e !== email);
            });
          } else {
            alert("Please enter a valid email address.");
          }
        }
      });

      // Gestion des num√©ros de t√©l√©phone
      const addPhoneButton = document.getElementById('add-phone-btn');
      const phoneFieldsContainer = document.getElementById('phone-fields-container');
      const phoneField = document.querySelector(".phone-field");

      // Liste des num√©ros de t√©l√©phone ajout√©s
      let addedPhones = [];

      // Ajouter un num√©ro de t√©l√©phone au clic
      addPhoneButton.addEventListener('click', function() {
        let phone = phoneField.value.trim();

        if (phone && !addedPhones.includes(phone)) {
          addedPhones.push(phone);

          // Cr√©er un conteneur pour le t√©l√©phone
          const phoneItem = document.createElement('div');
          phoneItem.classList.add('phone-item');

          // Afficher le t√©l√©phone et la croix
          const phoneText = document.createElement('span');
          phoneText.textContent = phone;
          phoneItem.appendChild(phoneText);

          const removeButton = document.createElement('span');
          removeButton.textContent = '‚úñ';
          removeButton.classList.add('remove-phone');
          phoneItem.appendChild(removeButton);

          phoneFieldsContainer.appendChild(phoneItem);

          // R√©initialiser le champ t√©l√©phone
          phoneField.value = '';

          // Event pour supprimer un t√©l√©phone
          removeButton.addEventListener('click', function() {
            phoneItem.remove();
            addedPhones = addedPhones.filter(p => p !== phone);
          });
        } else {
          alert("Please enter a valid phone number.");
        }
      });

      // Ajouter t√©l√©phone avec la touche TAB
      phoneField.addEventListener('keydown', function(event) {
        if (event.key === 'Tab') {
          event.preventDefault(); // emp√™cher le changement de focus

          let phone = phoneField.value.trim();

          if (phone && !addedPhones.includes(phone)) {
            addedPhones.push(phone);

            // Cr√©er un conteneur pour le t√©l√©phone
            const phoneItem = document.createElement('div');
            phoneItem.classList.add('phone-item');

            // Afficher le t√©l√©phone et la croix
            const phoneText = document.createElement('span');
            phoneText.textContent = phone;
            phoneItem.appendChild(phoneText);

            const removeButton = document.createElement('span');
            removeButton.textContent = '‚úñ';
            removeButton.classList.add('remove-phone');
            phoneItem.appendChild(removeButton);

            phoneFieldsContainer.appendChild(phoneItem);

            // R√©initialiser le champ de t√©l√©phone
            phoneField.value = '';

            // Event pour supprimer un t√©l√©phone
            removeButton.addEventListener('click', function() {
              phoneItem.remove();
              addedPhones = addedPhones.filter(p => p !== phone);
            });
          } else {
            alert("Please enter a valid phone number.");
          }
        }
      });

      // Avant l'envoi du formulaire, ajouter les emails et t√©l√©phones dynamiquement
      document.getElementById("invitation-form").addEventListener("submit", function(event) {
        // Emp√™cher la soumission initiale pour ajouter les emails et t√©l√©phones dynamiquement
        event.preventDefault();

        // R√©cup√©rer l'email du champ d'entr√©e si non vide
        let inputEmail = emailField.value.trim();
        if (inputEmail && !addedEmails.includes(inputEmail)) {
          addedEmails.push(inputEmail);
        }

        // Vider le tableau des emails existants
        let emailInputs = document.querySelectorAll("input[name='invitation[email][]']");
        emailInputs.forEach(input => input.remove());

        // Ajouter chaque email de `addedEmails` dans un champ cach√©
        addedEmails.forEach(function(email) {
          let emailInput = document.createElement('input');
          emailInput.type = 'hidden';  // champ cach√©
          emailInput.name = 'invitation[email][]';
          emailInput.value = email;
          document.getElementById("invitation-form").appendChild(emailInput);
        });

        // R√©cup√©rer le t√©l√©phone du champ d'entr√©e si non vide
        let inputPhone = phoneField.value.trim();
        if (inputPhone && !addedPhones.includes(inputPhone)) {
          addedPhones.push(inputPhone);
        }

        // Vider le tableau des num√©ros de t√©l√©phone existants
        let phoneInputs = document.querySelectorAll("input[name='invitation[phone][]']");
        phoneInputs.forEach(input => input.remove());

        // Ajouter chaque t√©l√©phone de `addedPhones` dans un champ cach√©
        addedPhones.forEach(function(phone) {
          let phoneInput = document.createElement('input');
          phoneInput.type = 'hidden';  // champ cach√©
          phoneInput.name = 'invitation[phone][]';
          phoneInput.value = phone;
          document.getElementById("invitation-form").appendChild(phoneInput);
        });

        // Soumettre le formulaire apr√®s l'ajout des emails et t√©l√©phones
        document.getElementById("invitation-form").submit();
      });
    });

document.addEventListener("DOMContentLoaded", function() {
  const searchInput = document.getElementById("contact-search");
  const resultsContainer = document.getElementById("contacts-results");
  const addContactButton = document.getElementById("add-contact-btn");
  const contactsContainer = document.getElementById("contacts-container");

  let selectedIndex = -1;
  let results = [];
  let addedContacts = new Set(); // Stocke les contacts d√©j√† ajout√©s

  searchInput.addEventListener("input", function() {
    const query = searchInput.value.trim();

    if (query.length === 0) {
      resetResults();
      return;
    }

    fetch(`<%= url_for(action: "search_contacts") %>?query=${encodeURIComponent(query)}`)
      .then(response => response.json())
      .then(contacts => {
        // Filtrer les contacts d√©j√† ajout√©s
        results = contacts.filter(contact => !addedContacts.has(contact.id));
        selectedIndex = -1; // R√©initialisation
        renderResults();
      });
  });

  searchInput.addEventListener("keydown", function(e) {
    if (results.length === 0) return;

    if (e.key === "ArrowDown") {
      e.preventDefault();
      selectedIndex = (selectedIndex + 1) % results.length;
      updateSelection();
    } else if (e.key === "ArrowUp") {
      e.preventDefault();
      selectedIndex = (selectedIndex - 1 + results.length) % results.length;
      updateSelection();
    } else if (e.key === "Enter" || e.key === "Tab") {
      e.preventDefault();
      if (selectedIndex >= 0) {
        selectContact(results[selectedIndex]);
      }
    }
  });

  function renderResults() {
    resultsContainer.innerHTML = "";
    if (results.length > 0) {
      resultsContainer.style.display = "block";
      results.forEach((contact, index) => {
        let item = document.createElement("div");
        item.classList.add("dropdown-item");
        item.textContent = contact.name;
        item.dataset.id = contact.id;

        item.addEventListener("click", function() {
          selectContact(contact);
        });

        resultsContainer.appendChild(item);
      });

      updateSelection();
    } else {
      resultsContainer.style.display = "none";
    }
  }

  function updateSelection() {
    let items = resultsContainer.querySelectorAll(".dropdown-item");
    items.forEach((item, index) => {
      if (index === selectedIndex) {
        item.classList.add("selected");
        searchInput.value = item.textContent; // Met √† jour le champ d'input
      } else {
        item.classList.remove("selected");
      }
    });
  }

  function selectContact(contact) {
    searchInput.value = contact.name;
    document.getElementById("selected-contact-id").value = contact.id;
    addContactToContainer(contact);
    addedContacts.add(contact.id); // Marquer comme ajout√©
    resetResults();
  }

  function resetResults() {
    resultsContainer.innerHTML = "";
    resultsContainer.style.display = "none";
    selectedIndex = -1;
  }

  function addContactToContainer(contact) {
    let contactItem = document.createElement("div");
    contactItem.classList.add("email-item"); // Utilisation du m√™me style que les emails

    // Afficher le nom avec le style
    const contactText = document.createElement("span");
    contactText.textContent = contact.name;
    contactItem.appendChild(contactText);

    // Bouton supprimer (croix rouge)
    let removeButton = document.createElement("span");
    removeButton.textContent = "‚úñ";
    removeButton.classList.add("remove-email"); // M√™me classe que pour email/tel
    removeButton.addEventListener("click", function() {
      contactItem.remove();
      addedContacts.delete(contact.id); // Supprimer du set pour qu'on puisse le r√©ajouter
    });

    contactItem.appendChild(removeButton);
    contactsContainer.appendChild(contactItem);

    searchInput.value = ""; // R√©initialiser le champ
  }

  addContactButton.addEventListener("click", function() {
    if (selectedIndex >= 0) {
      selectContact(results[selectedIndex]);
    }
  });

  // Fermer la liste si on clique en dehors
  document.addEventListener("click", function(event) {
    if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target)) {
      resetResults();
    }
  });
});
  </script>
